<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>{{ title }}</title>
 
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    
    <!-- Icon -->
    <script src="https://unpkg.com/feather-icons"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css" rel="stylesheet">
       
    <link href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
    
    <style type="text/css">
		h3, h6 {
			color: {{ background_color }};
		}
		
		{% for key,val in colors_css.items() %}
		.{{ key }} {
			background-color: {{ val }};
			height: 10px;
			width: 10px;
		}
		{% endfor %}
    h2, h3 {
      padding:10px;
    }
    header {
            background-color: {{ background_color }};
            color: {{ font_color }};
    }
    svg.text.branch-support {
      display:none;
      color:{{ background_color }};
      font-size: x-small;
    }
    .hidden-graph{
      margin: 2em;
    }
    .activeisolate {
      fill:{{ background_color }};
      font-size: larger;

    }
    @media (min-width: 768px) {
    .modal-xl {
    max-width: 90%; 
            }
    }
    .details {
            display: none;
    }
    .btn-outline-primary {
      color: {{ background_color }};
      border-color: {{ background_color }};
    }
		.dropdown-item.active, .dropdown-item:active {
		  background-color: {{ font_color }};
		  color: {{ background_color }};
      
		}

    .btn-outline-primary:hover {
      background-color:  {{ background_color }};
      color: {{ font_color }};
    }

    .btn-outline-primary:not(:disabled):not(.disabled).active {
      background-color:  {{ background_color }};
      color: {{ font_color }};
    }

    #current-table {
      margin-top:20px;
      border:none;
    }

    .btn-outline-secondary {
      color: {{ background_color }};
      border-color: {{ background_color }};
    }

    .btn-outline-secondary:hover {
      background-color:  {{ background_color }};
      color: {{ font_color }};
    }

    .btn-outline-secondary:not(:disabled):not(.disabled).active {
      background-color:  {{ background_color }};
      color: {{ font_color }};
    }
    .page-link {
      color:{{ background_color }};
      
    }
    .page-item.active .page-link{
      background-color:  {{ background_color }};
      border-color:{{ background_color }};
      color: {{ font_color }};
    }
    #current-table{
    background-color:white;
    /* border: 1px solid #333; */
    border-radius: 4px;
}
.tabulator-col-content {
  background-color:{{ background_color }};
}

#version-table .tabulator-col {
  color:white;
}

/*Theme the header*/
#current-table .tabulator-header {
    background-color:#fff;
    color:#fff;
    border-bottom: 0px solid #fff;
}

/*Allow column header names to wrap lines*/
#current-table .tabulator-col {
    white-space: normal;
    background-color: {{ background_color }};
}

/*Color the table rows*/
#current-table .tabulator-tableHolder .tabulator-table .tabulator-row{
    color:#fff;
    background-color: #666;
}

/*Color even rows*/
    #current-table .tabulator-tableHolder .tabulator-table .tabulator-row:nth-child(even) {
    background-color: #444;
}

.sidebar {
  position: fixed;
  top: 0;
  /* rtl:raw:
  right: 0;
  */
  bottom: 0;
  /* rtl:remove */
  left: 0;
  z-index: 100; /* Behind the navbar */
  padding: 48px 0 0; /* Height of navbar */
  box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
}

@media (max-width: 767.98px) {
  .sidebar {
    top: 5rem;
  }
}

.sidebar-sticky {
  position: relative;
  top: 0;
  height: calc(100vh - 48px);
  padding-top: .5rem;
  overflow-x: hidden;
  overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */
}

.sidebar .nav-link {
  font-weight: 500;
  color: #333;
}

.sidebar .nav-link .feather {
  margin-right: 4px;
  color: #727272; 
}

.sidebar .nav-link.active {
  color: #2470dc;
}

.sidebar .nav-link:hover .feather,
.sidebar .nav-link.active .feather {
  color: inherit;
}

.sidebar-heading {
  font-size: .75rem;
  text-transform: uppercase;
} 
.bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }


      </style> 
  </head>
  <body>
    <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
   <h1 class="left" style="margin:5px;">{{title}}</h1>
        <p class ="left" style="margin:5px;"> Data generated {{date}} by {{user}} </p>
      <button class="navbar-toggler position-right d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
</header>

      <div class="container-fluid">
        <div class = "row">
          <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3 sidebar-sticky">
              <ul class="nav flex-column">
                {% if phylo == 'phylo' %}
                  <li class="nav-item active">
                    <a class="nav-link phylogeny-button" href="#">Tree<span class="sr-only">(current)</span></a>
                  </li>
                {% endif %}
                {% for t,v in tables.items() %}
                  <li class="nav-item">
                    <a class="nav-link detail-button {{v.link}}-button" href="#">{{v.name}}</a>
                  </li>
                {% endfor %}
              </ul>
            </div>
          </nav>
          <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <!-- Phylo divs -->
          {% if phylo == 'phylo' %}
              <div id = "phylogeny">
                <h3 class="">Tree</h3>
                
                <div class="btn-toolbar mb-2 mb-md-0">
                  <div class="btn-group me-2">
                    <div class="hidden-nav-phylo btn-group" id = "hidden-nav-phylo"  style = "float:right; ">
                            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Annotate</button>
                                <div class="dropdown-menu" id="annotate">
                                  {% for metadata_column in metadata_columns %}
                                    <a class="dropdown-item annotate-tree" href="#">{{metadata_column}}</a>
                                  {% endfor %}
                                  <div class="dropdown-divider"></div>
                                    <a class="dropdown-item annotate-tree" href="#">All</a>
                                  <div class="dropdown-divider"></div>
                                    <a class="dropdown-item annotate-tree" href="#">Clear</a>
                                </div>
                          
                            <button class="btn btn-sm btn-outline-secondary legend-button" id = "toggle-legend" href="#">Toggle legend</button>
                            <button class="btn btn-sm btn-outline-secondary reset-tree-button" href="#">Reset</button>
                            <button class="btn btn-sm btn-outline-secondary download-tree-button" href="#">Download newick</button>
                            <button class="btn btn-sm btn-outline-secondary export-tree-button" href="#">Download image</button> 
                    </div>
                  </div>
                  
                </div>

                <div id="tree_string" style="display: none;">
                  {{newick}}
                </div>
                <div id = "phylocanvas" class = "tree" style = " width: 90%; margin:5px; border: 1px solid lightgray; float:left  " >
                  <!-- Placeholder for phylogenetic tree -->
                </div>
                
            </div>
            <div id = "legend" class = "tree" style = " width: 90%; margin:5px;  display: none ;flex-wrap: wrap; ">
              {% for category in legend %}
              <div class = "legend-{{category}}" style = "border:1px dotted lightgray;">
              <h6 style="margin: 10px;">{{category}}</h6>
                {% for lg in legend[category] %}
                <table style="margin: 20px;" >
                {% for key,val in lg.items() %}
                  <tr>
                    <td > <div class = "square {{val}}"></div> </td> 
                    <td> <div >{{key}}</div>  </td>
                  </tr>	
                {% endfor %}
                </table>
                {% endfor %}
              </div>
              {% endfor %}
              
              
            </div>
            {% endif %}
           

            <!-- div for tables, graphs and buttons for these types -->
            <div id ="tabular-data" class = "tabular-data" style = "display: none; margin: 5px;">
              <h3 id="section-title">Section title</h3>
                  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                      <div class="btn-toolbar mb-2 mb-md-0">
                          <div class="hidden-graph-nav btn-group" id = "hidden-graphs"  style = "display:none;">
                                  <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
                                  <!-- <li lass="nav-item dropdown"> -->
                                      <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Graphs</button>
                                      <div class="dropdown-menu" id="graphs">
                                      <a class="dropdown-item snps heatmap" id = "snp-distances-hmp" href="#">Heatmap</a>
                                      <a class="dropdown-item snps distribution" id = "snp-distances-dist" href="#">Distribution</a>
                                  </div>
                                  <!-- </li> -->
                                  </ul>
                          </div>
                          <button class="btn btn-sm btn-outline-secondary csv-download-button download-csv" id = "download-csv" href="#">Download csv</a>
                      </div>
                  </div>
                
                  <div id = "snp-distances-distribution" class = "hidden-graph" style="display:none">  <!-- placeholder for graphs  --> </div>
                  <div id = "snp-distances-heatmap" class = "hidden-graph" style="display:none;">  <!-- placeholder for graphs  --> </div>
                  <div id = "snp-density-graph" class = "hidden-graph" style="display: none;">  <!-- placeholder for graphs  --> </div>

                  <div id = "empty-table" ></div>
                    <div id="comment"></div>
                    <div id = "table-div">
                        <div id="current-table" class="table-responsive" style="display:none;">
                        <!-- placeholder for selected table = put selected table in this div -->    
                      </div>
                    </div>
                    
                </div>

          </main>
        </div>
      </div>

  
  
             

<script src="https://unpkg.com/@phylocanvas/phylocanvas.gl@latest/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vega@5.20.2"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-lite@5.1.1"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"></script>




<script>

function displayWindowSize(){
    // Get width and height of the window excluding scrollbars
    var w = document.documentElement.clientWidth;
    var h = document.documentElement.clientHeight;
	var div = document.getElementById("phylocanvas");
	// Set the height of the phylocanvas to be 50% of the window height
	var phylocanvas = document.getElementById("phylocanvas");
	phylocanvas.style.height = (h*1.5) + "px";
	return h  
}


var menus = document.getElementsByClassName("nav-link");
// to capitalize the first letter of the string
function capitalizeFirstLetter(val) {
    return String(val).charAt(0).toUpperCase() + String(val).slice(1);
}
// set menu title to capital
for ( var i = 0; i < menus.length; i++){
  console.log(menus[i].innerHTML);
  var new_menu = capitalizeFirstLetter(menus[i].innerHTML);
  menus[i].innerHTML = new_menu;
}
// set up annotation to extract
var annot=[];
var annot_all = {{ metadata_columns | tojson }};
function updateAnnot(val, annot){
	console.log(val);
	console.log(annot);
	if (val.hasClass("active") && val.hasClass("annotate-tree") && val[0].innerHTML != "Clear" && val[0].innerHTML != "All") {
		console.log("added " + val[0].innerHTML);
		annot.push(val[0].innerHTML);
	} else if (val[0].innerHTML == "All" && val.hasClass("annotate-tree")){
		annot = annot_all;
		val.removeClass("active");
	} else if (val[0].innerHTML == "Clear"){	
		annot = [];
		val.removeClass("active");
	} else {
		var index = annot.indexOf(val[0].innerHTML);
		if (index > -1) {
			annot.splice(index, 1);
		}
	}
	// console.log(annot);
	return annot;
}
var elements = document.getElementsByClassName("dropdown-item");
for (var i = 0; i < elements.length; i++) {
  var element = elements[i];

  element.addEventListener("click", function() {
	
  if (this.classList.contains("annotate-tree")) {
    console.log("clicked " + this.innerHTML);
	if (this.innerHTML == "Clear") {
		for (var i = 0; i < elements.length; i++){
			elements[i].classList.remove("active");
		}
	} else if (this.innerHTML == "All") {
		for (var i = 0; i < elements.length; i++){
			if (elements[i].innerHTML == "Clear"){
				elements[i].classList.remove("active");
			} else if (elements[i].classList.contains("annotate-tree")){
        elements[i].classList += " active";
      } else {
        elements[i].classList.remove("active");
      }
			
		}
		}
	
	$(this).toggleClass("active");
	annot = updateAnnot(val = $(this), annot = annot);
	console.log(annot);
  }
  });
}


var snp_distance_chart = {{ snp_distances | safe }};
      vegaEmbed('#snp-distances-distribution', snp_distance_chart).then(function(result){
        
      });

var snp_density_chart = {{ snp_density | safe }};
  vegaEmbed('#snp-density-graph', snp_density_chart).then(function(result){
  
});

var heatmap_chart = {{ snp_heatmap | safe }};
  vegaEmbed('#snp-distances-heatmap', heatmap_chart).then(function(result){
  
});


$(".phylogeny-button").click(function(){
  $("#current-table").empty();
  $("#table-download").hide();
  $("#tabular-data").hide();
  $("#phylogeny").show();
  $(".tree").show();
  $("#hidden-nav-phylo").show();
  $("#comment").empty();
  $("#software-versions").hide();
  $("#snp-distances-distribution").hide();
  $("#snp-density-graph").hide();
  $("#hidden-graphs").hide();
  $('#pan-svg').hide();
  $("#empty-table").empty();
  $("#legend").hide();
});

$(".legend-button").click(function(){
  console.log('toggle legend');
  var legend = document.getElementById("legend");
  
  if (legend.style.display === "flex") {
	legend.style.display = "none";
  } else  {
	legend.style.display = "flex";
  } 
});

var table_dict = {{tables | tojson}};
var column_dict = {{ columns | tojson }};
var comment = {{ comment | tojson }}
$(".detail-button").click(function(){
  console.log('button clicked');
  $("#table-download").show();
  $("#snp-distances-distribution").hide();
  $("#snp-distances-buttons").hide();
  $('#pan-svg').hide();
  $("#snp-density-graph").hide();
  $("#hidden-graphs").hide();
  var section = $(this).text().replace(/\s/g,'-').toLowerCase();
  console.log(section);
  
  $("#phylogeny").hide();
  $(".tree").hide();
  $("#hidden-nav-phylo").hide();
  $("#software-versions").hide();
  $("#current-table").empty();
  $("#comment").empty();
  $("#empty-table").empty();
  $("#comment").append("<p style='margin:5px; font-size:small;'><em>" + comment[section] + "</em></p>");
  console.log(capitalizeFirstLetter(section).replace(/-/g, ' '));
  console.log($("#section-title").innerHTML);
  var secttitle = document.getElementById("section-title");
  secttitle.innerHTML = capitalizeFirstLetter(section.replace(/-/g, ' '));
  if(section == 'distances') {
        var distance_graphs = ["heatmap","distribution"]
        $("#hidden-graphs").show();
            $("#snp-distances-distribution").show();
        $(".dropdown-item").click(function(){
                console.log($(this).text());
                for (var i = 0; i < distance_graphs.length;i++) {
                    if($(this).text().toLowerCase() == distance_graphs[i]){
                        console.log('showing ' + distance_graphs[i]);
                        $("#snp-distances-" + distance_graphs[i]).show();
                    } else {
                        console.log('hiding ' + distance_graphs[i]);
                        $("#snp-distances-" + distance_graphs[i]).hide();
                    }
                }
        });

            }
	
  if(section == '{{ core_genome }}'){
    
        $("#snp-density-graph").show();
  }
  if(section == 'pan-genome'){
        $('#pan-svg').show();
  }
  $("#tabular-data").show();
  //create Tabulator on DOM element with id "example-table"
  if(column_dict[section].length > 1){
    var table = new Tabulator("#current-table", {
    dataTree:true,
    pagination:"local",
    paginationSize:25,
    paginationSizeSelector:true,
    movableColumns:true,
    // height:205, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
    data:table_dict[section]['tables'], //assign data to table
    layout:"fitColumns", //fit columns to width of table (optional)
    columns:column_dict[section],
    // rowClick:function(e, row){ //trigger an alert message when the row is clicked
    // 	console.log("Row " + row.getData().id + " Clicked!!!!");
    // },
    });
    console.log(table_dict[section]["tables"].length)
    if (table_dict[section]["tables"].length > 20 && section == "distances") {
        console.log("Should hide table " + section);
        $("#empty-table").append("<p><b>Too many seqeuences to display " + section + ". Please download your matrix and/or visualise distances by selecting a graph.</b></p>");
        $("#table-div").hide();
    

    } else {
      $("#empty-table").empty();
        $("#tabular-data").show();
    }
    
    $("#download-csv").click(function(){
      console.log('clicking download button')
        table.download("csv", table_dict[section]["link"]+".csv", {delimiter:","});
      });
  } else {
    console.log("No results available for " + section);
    $("#comment").empty(); 
}
      
});
  
  
  
  function drawTree(tree_string, annot, height){
	console.log(tree_string);
	var tree = new phylocanvas.PhylocanvasGL(
				  document.querySelector("#phylocanvas"),
					{ 
					  // size: document.querySelector("#phylocanvas").getBoundingClientRect(),
					  treeToCanvasRatio:0.5,
					  showBlockHeaders:true,
					  blocks: annot,
					  blockLength: 48, // block size in pixels
					  blockPadding: 2, // the gap size between blocks in pixels
					  blockHeaderFontSize:15,
					  metadata :{{ metadata_tree | safe }},
					  source: tree_string,
					  type: phylocanvas.TreeTypes.Rectangular,
					  nodeSize:6,
					  showLabels: true,
					  showLeafLabels: true,
					  alignLabels:true,
					  interactive:true,
					  size : {
						width: document.querySelector("#phylocanvas").getBoundingClientRect().width,
						height:height
          }
					},
				  );
				  
				  return tree;
				}

  
  var tree_root = ["1"];
  var num_nodes = 4;
  $("#phylocanvas").height(displayWindowSize()/2);
  var tree_string = document.getElementById('tree_string').innerHTML;
  
  if (tree_string.trim() == "") {
    console.log("No tree available");
    
    $("#phylogeny").hide();
    if( menus[0].innerHTML.includes( "Tree")){
      console.log(menus[0].innerHTML)
      var default_table_name = menus[1].innerHTML.toLowerCase();
    } else {
      var default_table_name = menus[0].innerHTML.toLowerCase();
    }
    var table = new Tabulator("#current-table", {
    pagination:"local",
    paginationSize:25,
    paginationSizeSelector:true,
    movableColumns:true,
    // height:205, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
    data:table_dict[default_table_name]['tables'], //assign data to table
    layout:"fitColumns", //fit columns to width of table (optional)
    columns:column_dict[default_table_name],
    // rowClick:function(e, row){ //trigger an alert message when the row is clicked
    // 	console.log("Row " + row.getData().id + " Clicked!!!!");
    // },
    });
    // $(".download-csv").click(function(){
    //   console.log('clicking download button')
    //     table.download("csv", "data.csv", {delimiter:","});
    //   });
  } else {
    console.log(tree_string);
    var tree = drawTree(tree_string, annot_all, displayWindowSize()/2);
  }

  $("#phylocanvas").hover(function(){
    
    var hn = tree.getHighlightedNode();
    
    
  });
  $(".dropdown-item").click(function(){
	var to_annot = annot;
	tree.blocks = []; // clear blocks first then add new ones
	tree.setProps(
		{blocks: to_annot}
	)
  });
  $("#phylocanvas").click(function(event){
    var hn = tree.getHighlightedNode();
    // console.log(tree.getNodeById("0"));
    console.log(hn);
    tree.setRoot(hn.id);
    tree_root.push(hn.id);
    // console.log(tree_root);
    
  });

  $(".reset-tree-button").click(function(){
    console.log('resetting tree');
    console.log(tree_root);
    // tree.setRoot(tree_root[0]);
    // console.log(tree.findNodeById("1"));
    tree_root = ["1"];
    tree.setRoot("0");
  });

  
  function downloadString(text, fileType, fileName) {
      var blob = new Blob([text], { type: fileType });

      var a = document.createElement('a');
      a.download = fileName;
      a.href = URL.createObjectURL(blob);
      a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
      a.style.display = "none";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
    }

  $(".download-tree-button").click(function(){
    console.log('downloading newick');
    var tree_name = "{{title}}".replace(/\s/g, '_').toLowerCase();
    var nwk_download = tree.exportNewick();
    var filename = tree_name + '.nwk'
    downloadString(nwk_download,'text',filename);
  });

  $(".export-tree-button").click(function(){
    console.log('export');
    var png = tree.exportPNG();
    var filename = 'bohra.png';
    var download = document.createElement('a');
    download.href = png;
    download.download = filename;
    download.click();
  });

  $("#get-iso").click(function(){
    var i = $("#search-iso").val();
    console.log(i);

    var leaves = tree.getGraphWithoutLayout().leaves
    $.each(leaves, function(idx, val){
      if (val.id == i){
        tree.highlightNode(val);
      }
    })
  });
  
  </script>

<script>
feather.replace()
</script>
</body>
</html>